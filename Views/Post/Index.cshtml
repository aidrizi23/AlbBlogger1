
@using AlbBlogger1.Data
@using AlbBlogger1.Repositories.Pagination
@using Microsoft.AspNetCore.Identity
@model PaginatedList<Post>
@inject UserManager<ApplicationUser> UserManager

@{
ViewData["Title"] = "Latest Posts";
Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Latest Tweets</h1>

<p>
    <a asp-action="Create" class="btn btn-primary tweet-button">Create New Tweet</a>
</p>

<div class="row">
    <div class="col-md-12">
        <form asp-action="FilterByHighestLikes" method="get" class="form-inline">
            <button type="submit" class="btn btn-secondary tweet-button">Filter by Highest Likes</button>
        </form>
    </div>
</div>

<div class="row mt-3">
    <div class="col-md-12">
        @foreach (var post in Model)
        {
        <div class="card mb-3 tweet-card">
            <div class="card-body">
                <h5 class="card-title">@Html.DisplayFor(modelItem => post.Title)</h5>
                <p class="card-text">@Html.DisplayFor(modelItem => post.Content)</p>
                <p class="card-text"><small class="text-muted">Published on @Html.DisplayFor(modelItem => post.PublishDate)</small></p>
                <p class="card-text">
                    Tags: @Html.DisplayFor(modelItem => post.Tags)
                </p>
                <div class="d-flex justify-content-between align-items-center">
                    <div class="btn-group">
                        @if (User.Identity.IsAuthenticated && UserManager.GetUserId(User) == post.UserId)
                        {
                        <a asp-action="Edit" asp-route-id="@post.Id" class="btn btn-sm btn-outline-secondary tweet-button">Edit</a>
                        <a asp-action="Details" asp-route-id="@post.Id" class="btn btn-sm btn-outline-secondary tweet-button">View</a>
                        <button type="button" class="btn btn-sm btn-danger tweet-button" onclick="openDeleteConfirmation('@post.Id', '@post.Title', '@post.Content', '@post.PublishDate', '@post.Tags')">Delete</button>
                        }
                        else
                        {
                        <button type="button" class="btn btn-sm btn-outline-secondary tweet-button disabled">Edit</button>
                        <a asp-action="Details" asp-route-id="@post.Id" class="btn btn-sm btn-outline-secondary tweet-button">View</a>
                        }
                    </div>
                    <div class="d-flex align-items-center">
                        <button type="button" class="btn btn-sm btn-outline-secondary tweet-button" onclick="likePost('@post.Id')">Like</button>

                        <small class="text-muted ml-2" id="like-count-@post.Id">@post.Likes Likes</small>
                    </div>
                    <small class="text-muted">@post.Views Views</small>
                </div>
            </div>
        </div>
        }
    </div>
</div>

<!-- Modal for Delete Confirmation -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" role="dialog" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmationModalLabel">Delete Confirmation</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h3>Are you sure you want to delete this tweet?</h3>
                <div>
                    <h4>Title: <span id="deletePostTitle"></span></h4>
                    <p>Content: <span id="deletePostContent"></span></p>
                    <p>Published on: <span id="deletePostPublishDate"></span></p>
                    <p>Tags: <span id="deletePostTags"></span></p>
                </div>
            </div>
            <div class="modal-footer">
                <form id="deletePostForm" method="post">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-danger tweet-button">Delete</button>
                    <button type="button" class="btn btn-secondary tweet-button" data-dismiss="modal">Cancel</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
    function openDeleteConfirmation(postId, title, content, publishDate, tags) {
        // Update modal with post details
        $('#deletePostTitle').text(title);
        $('#deletePostContent').text(content);
        $('#deletePostPublishDate').text(publishDate);
        $('#deletePostTags').text(tags);

        // Update form action with the correct post id
        $('#deletePostForm').attr('action', '/Post/DeleteConfirmed/' + postId);

        // Show the modal
        $('#deleteConfirmationModal').modal('show');
    }

    function likePost(postId) {
        // Check if the user has already liked this post
        if (hasUserLikedPost(postId)) {
            alert("You have already liked this post.");
            return;
        }

        $.ajax({
            url: '/Post/LikePostAsync/' + postId,
            type: 'POST',
            success: function (response) {
                if (response.success) {
                    // Update UI here
                    var likesCount = response.likes;
                    $('#like-count-' + postId).text(likesCount + ' Likes');

                    // Add postId to the list of liked posts for the current user
                    addLikedPost(postId);

                    // Disable the like button after liking
                    $('#like-button-' + postId).prop('disabled', true);
                } else {
                    alert("Failed to like the post: " + response.message);
                }
            },
            error: function (xhr, status, error) {
                console.error('Error liking post:', error);
                alert('Error liking post.');
            }
        });
    }

    function hasUserLikedPost(postId) {
        // Implement logic to check if the user has already liked the post
        // Here, assume likedPosts is an array storing postIds that the user has liked
        return likedPosts.includes(postId);
    }

    function addLikedPost(postId) {
        // Add postId to the list of liked posts for the current user
        likedPosts.push(postId);
    }



</script>
}

<style>
    body {
        background-color: #e6ecf0;
        font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
    }

    h1 {
        font-weight: bold;
        color: #1DA1F2;
    }

    .tweet-button {
        background-color: #1DA1F2;
        border-color: #1DA1F2;
        font-weight: bold;
        border-radius: 35px;
        font-size: 16px;
    }

    .tweet-button:hover {
        background-color: #0d95e8;
        border-color: #0d95e8;
    }

    .btn-outline-secondary.tweet-button {
        border-color: #1DA1F2;
        color: #1DA1F2;
    }

    .btn-outline-secondary.tweet-button:hover {
        background-color: #1DA1F2;
        color: white;
    }

    .card.tweet-card {
        border-radius: 15px;
        border: none;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .modal-title {
        color: #1DA1F2;
    }
</style>

